{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAO,CACXC,SAAUC,SAASC,cAAc,SACjCC,gBAAiBF,SAASC,cAAc,kBACxCE,eAAgBH,SAASC,cAAc,iBACvCG,iBAAkBJ,SAASC,cAAc,oBAG3C,IAAII,EAAiB,KACjBC,EAAkB,KAEtB,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KACLC,KAAKC,SAAW,GAEpCH,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAM,GAG/B,CAEAX,EAAKC,SAASgB,iBAAiB,UAAUC,IACvCA,EAAEC,iBAEEnB,EAAKI,gBAAgBgB,MAAQ,EAC/BtB,EAAAuB,OAAOC,QACL,sEAKAtB,EAAKK,eAAee,MAAQ,EAC9BtB,EAAAuB,OAAOC,QACL,qEAKAtB,EAAKM,iBAAiBc,OAAS,EACjCtB,EAAAuB,OAAOC,QAAQ,iDAIbf,GACFgB,cAAchB,GAEZC,GACFe,cAAcf,GAGhBD,EAAiBiB,YAAW,KAC1B,IAAIC,EAAI,EACJC,EAAaC,OAAO3B,EAAKI,gBAAgBgB,OAE7CX,EAAcgB,EAAGC,GACdE,MAAK,EAAClB,SAAEA,EAAQC,MAAEA,MAEjBb,EAAAuB,OAAOQ,QAAQ,qBAAqBnB,QAAeC,MAAS,IAE7DmB,OAAM,EAACpB,SAAEA,EAAQC,MAAEA,MAElBb,EAAAuB,OAAOC,QAAQ,oBAAoBZ,QAAeC,MAAS,IAG/DH,EAAkBuB,aAAY,KACxBN,EAAIzB,EAAKM,iBAAiBc,OAC5BK,GAAK,EACLC,GAAcC,OAAO3B,EAAKK,eAAee,OAEzCX,EAAcgB,EAAGC,GACdE,MAAK,EAAClB,SAAEA,EAAQC,MAAEA,MAEjBb,EAAAuB,OAAOQ,QAAQ,qBAAqBnB,QAAeC,MAAS,IAE7DmB,OAAM,EAACpB,SAAEA,EAAQC,MAAEA,MAElBb,EAAAuB,OAAOC,QAAQ,oBAAoBZ,QAAeC,MAAS,MAG/DY,cAAcf,GACdR,EAAKC,SAAS+B,QAChB,GACChC,EAAKK,eAAee,MAAK,GAC3BpB,EAAKI,gBAAgBgB,OAAK","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  formData: document.querySelector('.form'),\n  delayInputValue: document.querySelector('[name=\"delay\"]'),\n  stepInputValue: document.querySelector('[name=\"step\"]'),\n  amountInputValue: document.querySelector('[name=\"amount\"]'),\n};\n\nlet timerTimeoutId = null; // створення пустої змінної \"timerTimeoutId\"\nlet timerIntervalId = null; // створення пустої змінної \"timerIntervalId\"\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    if (shouldResolve) {\n      resolve({ position, delay }); // коли обіцянку виконано\n    } else {\n      reject({ position, delay }); // коли обіцянку відхилено\n    }\n  });\n} // функція createPromise повертає об'єкт \"проміс\"\n\nrefs.formData.addEventListener('submit', e => {\n  e.preventDefault(); // блокування дій за \"замовчуванням\" у браузері\n\n  if (refs.delayInputValue.value < 0) {\n    Notify.failure(\n      `The value of \"First delay (ms)\" must be greater than or equal to 0`\n    );\n    return;\n  } // якщо значення поля \"First delay (ms)\" меньше 0, то перериваєм цю ітерацію прослуховування події \"submit\"\n\n  if (refs.stepInputValue.value < 0) {\n    Notify.failure(\n      `The value of \"Delay step (ms)\" must be greater than or equal to 0`\n    );\n    return;\n  } // якщо значення поля \"Delay step (ms)\" меньше 0, то перериваєм цю ітерацію прослуховування події \"submit\"\n\n  if (refs.amountInputValue.value <= 0) {\n    Notify.failure(`The value of \"Amount\" must be greater than 0`);\n    return;\n  } // якщо значення поля \"Amount\" меньше або дорівнює 0, то перериваєм цю ітерацію прослуховування події \"submit\"\n\n  if (timerTimeoutId) {\n    clearInterval(timerTimeoutId);\n  } // обнулення таймера, якщо він раніше був запущений\n  if (timerIntervalId) {\n    clearInterval(timerIntervalId);\n  } // обнулення таймера, якщо він раніше був запущений\n\n  timerTimeoutId = setTimeout(() => {\n    let i = 1; // ініціалізація лічильника\n    let totalDelay = Number(refs.delayInputValue.value); // ініціалізація \"delay\"\n\n    createPromise(i, totalDelay)\n      .then(({ position, delay }) => {\n        // console.log(`✔️ Fulfilled promise ${position} in ${delay}ms`);\n        Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n      }) // метод then()екземпляру Promise негайно повертає еквівалентний Promise об’єкт, коли обіцянку виконано\n      .catch(({ position, delay }) => {\n        // console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n        Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n      }); // метод catch() екземпляру Promise негайно повертає еквівалентний Promise об’єкт, коли обіцянку відхилено\n\n    timerIntervalId = setInterval(() => {\n      if (i < refs.amountInputValue.value) {\n        i += 1;\n        totalDelay += Number(refs.stepInputValue.value);\n\n        createPromise(i, totalDelay)\n          .then(({ position, delay }) => {\n            // console.log(`✔️ Fulfilled promise ${position} in ${delay}ms`);\n            Notify.success(`Fulfilled promise ${position} in ${delay}ms`); // метод then()екземпляру Promise негайно повертає еквівалентний Promise об’єкт, коли обіцянку виконано\n          })\n          .catch(({ position, delay }) => {\n            // console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n            Notify.failure(`Rejected promise ${position} in ${delay}ms`); // метод catch() екземпляру Promise негайно повертає еквівалентний Promise об’єкт, коли обіцянку відхилено\n          });\n      } else {\n        clearInterval(timerIntervalId);\n        refs.formData.reset();\n      } // якщо, лічильник менше заданого \"amount\" створюємо Promise, інакше обнулюємо таймер інтервалу очищаємо форму\n    }, refs.stepInputValue.value); // таймер інтервалу\n  }, refs.delayInputValue.value); // таймер таймауту\n});\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$refs","formData","document","querySelector","delayInputValue","stepInputValue","amountInputValue","$47d4ff9957288465$var$timerTimeoutId","$47d4ff9957288465$var$timerIntervalId","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","Math","random","addEventListener","e","preventDefault","value","Notify","failure","clearInterval","setTimeout","i","totalDelay","Number","then","success","catch","setInterval","reset"],"version":3,"file":"03-promises.6f0001a9.js.map"}